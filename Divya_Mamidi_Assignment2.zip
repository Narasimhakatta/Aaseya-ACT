{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "07d44eba-81d4-4880-b239-63a859b71bca",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid decimal literal (4165489901.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[1], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    1.I created a list of users with their nationalities and used a dictionary to map each nationality to a continent. Then I used a loop to count how many users belong to each continent and stored the result in a dictionary.\u001b[0m\n\u001b[1;37m     ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid decimal literal\n"
     ]
    }
   ],
   "source": [
    "1.I created a list of users with their nationalities and used a dictionary to map each nationality to a continent. Then I used a loop to count how many users belong to each continent and stored the result in a dictionary.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4b059dab-d45c-4b13-9373-1d65992ab1ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Europe': 7, 'Asia': 5, 'Central America': 1, 'Australia': 1, 'North America': 2, 'South America': 1, 'Africa': 1}\n"
     ]
    }
   ],
   "source": [
    "users = [\n",
    "    ('Maria', 'Greek'), ('Jean', 'Maltese'),\n",
    "    ('Juan', 'Spanish'), ('Dima', 'Ukrainian'),\n",
    "    ('Agata', 'Thai'), ('Rafal', 'Polish'),\n",
    "    ('Diego', 'Turkish'), ('Stan', 'Panamanian'),\n",
    "    ('John', 'Australian'), ('Frank', 'Belgian'),\n",
    "    ('Jane', 'Canadian'), ('Paul', 'Argentinian'),\n",
    "    ('Taylor', 'Danish'), ('Kate', 'American'),\n",
    "    ('Mark', 'Sri Lankan'), ('Jane', 'Japanese'),\n",
    "    ('Ted', 'Indian'), ('Jean', 'Egyptian')\n",
    "]\n",
    "\n",
    "nationality_to_continents = {\n",
    "    'Greek': 'Europe', 'Maltese': 'Europe',\n",
    "    'Spanish': 'Europe', 'Ukrainian': 'Europe',\n",
    "    'Thai': 'Asia', 'Polish': 'Europe',\n",
    "    'Turkish': 'Asia', 'Panamanian': 'Central America',\n",
    "    'Australian': 'Australia', 'Belgian': 'Europe',\n",
    "    'Canadian': 'North America', 'Argentinian': 'South America',\n",
    "    'Danish': 'Europe', 'American': 'North America',\n",
    "    'Sri Lankan': 'Asia', 'Japanese': 'Asia',\n",
    "    'Indian': 'Asia', 'Egyptian': 'Africa'\n",
    "}\n",
    "\n",
    "users_continents = {}\n",
    "\n",
    "for name, nationality in users:\n",
    "    continent = nationality_to_continents.get(nationality)\n",
    "    if continent:\n",
    "        users_continents[continent] = users_continents.get(continent, 0) + 1\n",
    "\n",
    "print(users_continents)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfd1ca4b-dca4-44e4-b614-25903297ab65",
   "metadata": {},
   "source": [
    "2.This function checks each person's job title. If \"SQL\" is not there, it keeps them in the list. Otherwise, it skips them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4b49125d-7c32-4396-a1f1-f9f2321abd75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('Leslie Burton', 'HR Specialist', 2300), ('Dorothy Castillo', 'UX Designer', 3100)]\n"
     ]
    }
   ],
   "source": [
    "def remove_sql_specialists(people_list):\n",
    "    result = []\n",
    "    for person in people_list:\n",
    "        name, job, salary = person\n",
    "        if \"SQL\" not in job:\n",
    "            result.append(person)\n",
    "    return result\n",
    "\n",
    "new_hires = [\n",
    "    ('Mark Adams', 'SQL Analyst', 4000),\n",
    "    ('Leslie Burton', 'HR Specialist', 2300),\n",
    "    ('Dorothy Castillo', 'UX Designer', 3100)\n",
    "]\n",
    "\n",
    "filtered_hires = remove_sql_specialists(new_hires)\n",
    "print(filtered_hires)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56258ea0-caf9-4512-970d-4ca29c18f595",
   "metadata": {},
   "source": [
    "3.Python program that accepts a string and calculates the number of digits and letters. [take string input from user]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce7cde1a-227f-4562-8615-8cc55601f959",
   "metadata": {},
   "outputs": [],
   "source": [
    "s = input(\"Enter string\")\n",
    "\n",
    "letters = 0\n",
    "digits = 0\n",
    "\n",
    "for ch in s:\n",
    "    if ch.isalpha():\n",
    "        letters = letters + 1\n",
    "    # I used else before but it was counting spaces, so changed it\n",
    "    elif ch.isdigit():\n",
    "        digits = digits + 1\n",
    "\n",
    "print(\"Letters are\", letters)\n",
    "print(\"Digits are\", digits)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09877505-0cd9-487b-a3ef-3c3a91d05f4e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
